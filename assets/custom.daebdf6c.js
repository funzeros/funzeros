class i{static randomLenNum(r=4,a=!0){const t=(Math.random()*Math.pow(10,r)).toFixed(0);return a?Number(t):new Array(r-t.length).fill("0").join("")+t}static randomStr(){return Math.random().toString(36).slice(-8)}static randomBoolean(r=.5){return Math.random()<r}static randomRange(r,a,t=0){return this.precision(Math.random()*(a-r)+r,t)}static randomArray(r){return r[Math.floor(Math.random()*r.length)]}static randomArrayLength(r){return Math.floor(Math.random()*r)}static precision(r,a=2){const t=Math.pow(10,a),e=Number(r);return isNaN(e)?0:Math.round(e*t)/t}static between(r,a,t=!1){const e=typeof r=="number"?r:new Date(r).valueOf(),n=a.map(o=>typeof o=="number"?o:new Date(o).valueOf()).sort();return t?e>=n[0]&&e<=n[1]:e>=n[0]&&e<n[1]}}class u extends Map{static array(r){return Array.from(r,([a,t])=>({key:a,value:t}))}static getKeys(r){return Array.from(r,([a])=>a)}getKeys(){return Array.from(this,([r])=>r)}getValues(){return Array.from(this,([,r])=>r)}getEntries(){return Array.from(this)}map(r){return Array.from(this,([a,t],e)=>r(t,a,e))}filter(r){const a=[];return this.forEach(t=>{r(t)&&a.push(t)}),a}}export{i as G,u as a};
